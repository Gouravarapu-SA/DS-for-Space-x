# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_uESvzNLyRGJi1v0GO-v9MCjuNshhhDp
"""

import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px # Import Plotly Express

# Load the dataset
url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv'
df = pd.read_csv(url)

# Display the first few rows of the dataframe
df.head()

pip install dash

pip install --upgrade dash

import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px

# Load the dataset
url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv'
df = pd.read_csv(url)

# Display the first few rows of the dataframe
print(df.head())

# Unique launch sites
launch_sites = df['LaunchSite'].unique()

# Dash app initialization
app = dash.Dash(__name__, suppress_callback_exceptions=True)

# Combine both the dropdown and the range slider into a single layout
app.layout = html.Div([
    dcc.Dropdown(
        id='launch-site-dropdown',
        options=[{'label': site, 'value': site} for site in launch_sites],
        value=launch_sites[0] # Default value is the first site
    ),
    html.Div(id='dd-output-container'),
    dcc.RangeSlider(
        id='payload-range-slider',
        min=df['PayloadMass'].min(),
        max=df['PayloadMass'].max(),
        step=1000, # Adjust step size as needed
        marks={i: '{} kg'.format(i) for i in range(int(df['PayloadMass'].min()), int(df['PayloadMass'].max()), 5000)},
        value=[df['PayloadMass'].min(), df['PayloadMass'].max()]
    ),
    html.Div(id='slider-output-container')
])

@app.callback(
    Output('dd-output-container', 'children'),
    [Input('launch-site-dropdown', 'value')]
)
def update_output(value):
    # Count the number of launches per site
    launch_counts = df['LaunchSite'].value_counts()
    # Plotly pie chart with title 'Total Launches by Site'
    fig = px.pie(values=launch_counts, names=launch_counts.index, title=f'Total Launches by Site')
    return dcc.Graph(figure=fig)

@app.callback(
    Output('slider-output-container', 'children'),
    [Input('payload-range-slider', 'value')]
)
def update_output_range(value_range):
    # Filter data based on payload range
    filtered_df = df[(df['PayloadMass'] >= value_range[0]) & (df['PayloadMass'] <= value_range[1])]
    # Plotly scatter plot with title 'Correlation between Payload and Success for All Sites'
    fig = px.scatter(filtered_df, x='PayloadMass', y='Class', color='BoosterVersion', title='Correlation between Payload and Success for All Sites')
    return dcc.Graph(figure=fig)

if __name__ == '__main__':
    app.run_server(debug=True)

